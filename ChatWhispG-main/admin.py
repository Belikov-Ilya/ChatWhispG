from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import config
import sqlite3
import logging
import time

logger = logging.getLogger(__name__)
admin_router = Router()

@admin_router.message(lambda message: message.text.startswith('/admin'))
async def handle_admin(message: types.Message):
    if message.from_user.id not in config.ADMINS:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /admin –±–µ–∑ –ø—Ä–∞–≤")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if config.FILTER_PROFANITY else '‚ùå'} –ë—Ä–∞–Ω—å",
            callback_data="toggle_profanity"
        )],
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if config.FILTER_ADVERTISING else '‚ùå'} –†–µ–∫–ª–∞–º–∞",
            callback_data="toggle_ad"
        )],
        [InlineKeyboardButton(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data="show_statistics"
        )]
    ])

    await message.reply("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)

@admin_router.callback_query(lambda c: c.data in ["toggle_profanity", "toggle_ad", "show_statistics"])
async def handle_admin_buttons(callback: CallbackQuery):
    if callback.data == "toggle_profanity":
        config.FILTER_PROFANITY = not config.FILTER_PROFANITY
        logger.info(f"–§–∏–ª—å—Ç—Ä –±—Ä–∞–Ω–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω: {'–í–∫–ª—é—á–µ–Ω' if config.FILTER_PROFANITY else '–û—Ç–∫–ª—é—á–µ–Ω'}")
        await callback.message.edit_text(
            f"–§–∏–ª—å—Ç—Ä –±—Ä–∞–Ω–∏: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if config.FILTER_PROFANITY else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}"
        )

    elif callback.data == "toggle_ad":
        config.FILTER_ADVERTISING = not config.FILTER_ADVERTISING
        logger.info(f"–§–∏–ª—å—Ç—Ä —Ä–µ–∫–ª–∞–º—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω: {'–í–∫–ª—é—á–µ–Ω' if config.FILTER_ADVERTISING else '–û—Ç–∫–ª—é—á–µ–Ω'}")
        await callback.message.edit_text(
            f"–§–∏–ª—å—Ç—Ä —Ä–µ–∫–ª–∞–º—ã: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if config.FILTER_ADVERTISING else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}"
        )

    elif callback.data == "show_statistics":
        conn = sqlite3.connect("database.db")
        cursor = conn.cursor()

        # Ensure necessary table exists
        cursor.execute("CREATE TABLE IF NOT EXISTS statistics (id INTEGER PRIMARY KEY AUTOINCREMENT, timestamp INTEGER NOT NULL, type TEXT DEFAULT 'normal')")

        now = int(time.time())
        one_hour_ago = now - 3600
        one_week_ago = now - 7 * 24 * 3600

        cursor.execute("SELECT COUNT(*) FROM statistics WHERE timestamp > ?", (one_hour_ago,))
        last_hour = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM statistics WHERE timestamp > ?", (one_week_ago,))
        last_week = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM statistics")
        all_time = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM statistics WHERE timestamp > ? AND type IN ('violation_ad', 'violation_profanity')", (one_hour_ago,))
        violations_hour = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM statistics WHERE timestamp > ? AND type IN ('violation_ad', 'violation_profanity')", (one_week_ago,))
        violations_week = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM statistics WHERE type IN ('violation_ad', 'violation_profanity')")
        violations_all_time = cursor.fetchone()[0]

        conn.close()

        stats_message = (f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
                         f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {last_hour} (–ù–∞—Ä—É—à–µ–Ω–∏–π: {violations_hour})\n"
                         f"–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è: {last_week} (–ù–∞—Ä—É—à–µ–Ω–∏–π: {violations_week})\n"
                         f"–í—Å–µ –≤—Ä–µ–º—è: {all_time} (–ù–∞—Ä—É—à–µ–Ω–∏–π: {violations_all_time})")

        await callback.message.edit_text(stats_message)